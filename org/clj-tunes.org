This document is for collecting and sketching ideas, it is not meant
to be a user friendly tutorial. There might be inconsistencies,
unfinished work, bugs and other dragons.

This is a literate programming document, for interactive use with
Emacs and Org mode.

* Test if Overtone works

  #+BEGIN_SRC clojure
  (use 'overtone.live)
  (demo (sin-osc))
  #+END_SRC

  #+RESULTS:
  : nil#<synth-node[loading]: user/audition-synth 59>

* Playing Piano
  Use the overtone piano instrument:
  #+BEGIN_SRC clojure
  (use 'overtone.inst.piano)
  #+END_SRC

  #+RESULTS:
  : nil

  #+BEGIN_SRC clojure
  ; play the MIDI note 60 (C4)
  (piano 60)

  ; play an Am chord
  (doseq [note (chord :A3 :minor)] (piano note))
  #+END_SRC

  #+RESULTS:
  : #<synth-node[loading]: overtone.inst.piano/piano 55>nil

  Chords are a vector of notes:
  #+BEGIN_SRC clojure
  (chord :A3 :minor) ; => [57 64 60]
  #+END_SRC

** Some basic music
   Let's play a progression of notes first:
   #+BEGIN_SRC clojure
   (let [metro (metronome 120)]
     (defn chord-progression [metro beat]
       (let [notes (map note [:C3 :E4 :G4])]
         (at (metro (+ 0 beat)) (piano (nth notes 0)))
         (at (metro (+ 2 beat)) (piano (nth notes 1)))
         (at (metro (+ 4 beat)) (piano (nth notes 2)))))

     (chord-progression metro (metro)))
   #+END_SRC

   This should be less redundant:
   #+BEGIN_SRC clojure
   (defn play-note-at!
     "Plays the provided note pitch at the given position."
     [[pitch position]]
     (let [metro (metronome 120)
           next-beat (metro)
           instrument piano]
       (at (metro (+ next-beat position))
           (instrument (note pitch)))))

   (let [melody [[:C3 0]
                 [:E3 1]
                 [:E3 2]
                 [:G3 3]
                 [:H2 5]
                 [:C3 6]]]
     (dorun (map play-note-at! melody)))
   #+END_SRC
* Sound Design with Synthesizers
** What is sound?
*** Sine waves
    All sounds can be described as combinations of sine waves
    ([[https://en.wikipedia.org/wiki/Fourier_series][Fourier Series]], don't worry, you don't need to understand the
    math).
    A simple, single sine wave is the most "clean"
    sound. Here is how it sounds:
    #+BEGIN_SRC clojure
    (demo (sin-osc))
    #+END_SRC

    #+RESULTS:
    : #<synth-node[loading]: user/audition-synth 32>

*** Pitch and Volume: Frequency and Amplitude
    Frequency means how often per second the wave oscillates. This
    determines the pitch of the tone. `sin-osc` takes a frequency as
    the first parameter. Play around with it a bit do get a feel for
    it:
    #+BEGIN_SRC clojure
    (let [frequency 400]
      (demo (sin-osc frequency)))
    #+END_SRC
    Let's listen to a range of frequencies:
    #+BEGIN_SRC clojure
    (for [frequency (range 100 5000 100)]
      (demo (sin-osc frequency)))
    #+END_SRC

    The Frequency is usually expressed in the unit Hz which means
    cycles per second.

    Amplitude is the "height" or intensity of the sine wave, it
    determines the volume of the sound. We can use a simple
    multiplication to change the amplitude of an oscillator:
    #+BEGIN_SRC clojure
    (let [frequency 400
          volume 10]
      (demo (* (sin-osc frequency)
               volume)))
    #+END_SRC
    An important unit for amplitudes and volumes is [[https://en.wikipedia.org/wiki/Decibel][dB]]. However, it's
    a rather complicated unit and for our use cases we can just
    think of relative volumes, like 1 for maximum volume and 0
    for silence.

** Sound Design
*** Wave compositions and overtones

    To make a sound composed of multiple simple sine waves, we can
    just add them to each other:

    #+BEGIN_SRC clojure
    (let [tone1 (sin-osc 400)
          tone2 (sin-osc 800)]
      (demo (+ tone1 tone2)))
    #+END_SRC
    What you hear is the combination of a sine wave with 400Hz and
    another one with 800Hz.

    You can get an interesting effect when you combine sound with
    frequencies close to each other. It results in a "wobbling" sound:

    #+BEGIN_SRC clojure
    (let [tone1 (sin-osc 300)
          tone2 (sin-osc 305)
          tone3 (sin-osc 315)]
      (demo (+ tone1 tone2 tone3)))
    #+END_SRC

    Let's go wild a create a sound made out of random frequencies:
    #+BEGIN_SRC clojure
    (let [num-tones 5
          rnd-tone (fn [] (sin-osc (+ 200 (rand-int 800))))
          tones (repeatedly num-tones rnd-tone)]
      (demo (apply + tones)))
    #+END_SRC
    Congratulations, you just did some computer generated sound design!

*** Additive vs. Subtractive Synthesis
    As we have seem, we can build different sounds by adding more an
    more sine waves. This is called additive synthesis and it is a
    feasible way to build synthesizers.

    However, there is another way: "Subtractive Sound Design" which
    means we start with a signal that is rich in different frequencies
    (composed of many waves) and then we subtract certain parts of it,
    to shape its sound.
    Subtractive sound design is considered to be easier and it's a bit
    more common than additive synthesis.

    Here, we go, let us do some subtractive synthesis now. First we
    want a signal that is very rich, so we can subtract from it.
    #+BEGIN_SRC clojure
    (demo (white-noise))
    #+END_SRC
    Awesome, we got noise! How could that be any good? Well as it
    turns out, [[https://en.wikipedia.org/wiki/White_noise][white noise]] is just a random distribution of
    frequencies with a flat spectrum. Simplified it just means, that
    every frequency has the same probability of occuring the the
    sound or that it contains all frequencies.
    There are other "colors" of noises too, which have other
    distributions of frequencies and are available in Overtone, too.


    So, with white noise we have a signal that is rich in every
    frequency in the range, that can be perceived by humans. From this
    signal we are going to subtract something to give it a different
    sound:

    #+BEGIN_SRC clojure
    (let [num-tones 50
          rnd-tone (fn [] (sin-osc (+ 200 (rand-int 800))))
          tones (repeatedly num-tones rnd-tone)]
      (demo (- (white-noise) (apply + tones))))


    #+END_SRC

    #+RESULTS:
    : #<synth-node[loading]: user/audition-synth 81>

    Hm, okay this probably does not sound to great. The thing is, our
    white noise signal is so rich, that we would need to
    subtract many, many frequencies and it's hard to predict what the
    sound will be like.
    Also be a bit cautious with adding more tones to be subtracted,
    a few hundred tones can put quite some pressure on your computer.

    Later we will learn more powerful approaches for subtractive synthesis.

    Instead of white noise, let us try another signal to start with:

    #+BEGIN_SRC clojure
    (demo (lf-pulse:ar 200)) ; pulse or rectangle wave

    (demo (lf-tri 200)) ; triangle wave

    (demo (lf-saw 200)) ; sawtooth wave
    #+END_SRC

    #+RESULTS:
    : #<synth-node[loading]: user/audition-synth 834>#<synth-node[loading]: user/audition-synth 835>#<synth-node[loading]: user/audition-synth 836>

    Composing these oscillators give some interesting results more
    quickly than starting out with white noise and simple sines:

    #+BEGIN_SRC clojure
    (let [tri (lf-tri 180)
          sin (sin-osc 80)
          tri-high (lf-tri 300)]
      (demo (+ (- (lf-saw 200)
                  tri
                  sin)
               tri-high)))
    #+END_SRC

    #+RESULTS:
    : #<synth-node[loading]: user/audition-synth 839>

*** Attack, sustain and release
** Visualizing Waves
   #+BEGIN_SRC clojure
   (require '[quil.core :as q])
   (use 'overtone.live)

   (let [width 600
         height 300
         max-time 1
         max-amplitude 2
         time-scale (/ width max-time)
         amp-scale (/ height 2 max-amplitude)]

     (def sampled-wave (atom [[0 0]]))

     (defn draw []
       (q/background 255)
       (q/with-translation [0 (/ (q/height) 2)]
         (doseq [[x y] @sampled-wave]
           (q/point (* time-scale x)
                    (* amp-scale y)))))

     (q/defsketch sine-plot
       :size [width height]
       :draw draw)

     (let [osc-freq 3
           sample-freq 300
           sample-dt (/ 1 sample-freq)
           tr (impulse sample-freq)
           step (sin-osc:kr osc-freq)]

       (on-event "/sample-osc"
                 (fn [{[_ _ osc-value] :args}]
                   (swap! sampled-wave
                          #(conj % [(+ sample-dt (first (last %)))
                                    osc-value])))
                 ::sample-osc-listener)

       (demo 1 (send-reply tr "/sample-osc" [step]))))

   #+END_SRC

   #+RESULTS:
   : nil

* Turning Data into Sound
** Ideas
   - trigger sounds from different event sources like Twitter, etc.
   - retrieve metrics from wikipedia articles and turn them into synth
     configs
* Combine with Visualizations
